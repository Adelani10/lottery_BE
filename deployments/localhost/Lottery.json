{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        }
      ],
      "name": "Lottery__FailedUpkeep",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__FundsNotSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__InsufficientETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__LotteryCalculating",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerEntered",
          "type": "address"
        }
      ],
      "name": "lotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestedWinner",
          "type": "uint256"
        }
      ],
      "name": "requestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerIndex",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf39d6d45d8a57a534ab2513386561fdac4ec7d57e301e2f77e011323429ed351",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1230339",
    "logsBloom": "0x
    "blockHash": "0x1dcbb615288558cb917848adacd02fb7bcfc3aaae843da5d76fb0509a7f4b607",
    "transactionHash": "0xf39d6d45d8a57a534ab2513386561fdac4ec7d57e301e2f77e011323429ed351",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1230339",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "df3a87bebe1dbc6f3209151f03d0dc91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"Lottery__FailedUpkeep\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__FundsNotSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__LotteryCalculating\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerEntered\",\"type\":\"address\"}],\"name\":\"lotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestedWinner\",\"type\":\"uint256\"}],\"name\":\"requestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerIndex\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\n// errors\\nerror Lottery__InsufficientETH();\\nerror Lottery__LotteryCalculating();\\nerror Lottery__FundsNotSent();\\nerror Lottery__FailedUpkeep(uint256 lotteryState, uint256 numPlayers, uint256 currentBalance);\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    event lotteryEnter(address indexed playerEntered);\\n    event requestedLotteryWinner(uint256 indexed requestedWinner);\\n    event winnerPicked(address indexed winner);\\n\\n    // Type Variables\\n    enum State {\\n        Open,\\n        Calculating\\n    }\\n\\n    // lottery variables\\n    State private lotteryState;\\n    address private s_recentWinner;\\n    uint256 private s_lastTimeStamp;\\n\\n\\n    // State Variables\\n    uint256 public immutable i_entranceFee;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable s_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private immutable i_interval;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 2;\\n    address payable[] private s_players;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        lotteryState = State.Open;\\n        s_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n        i_gasLane = gasLane;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__InsufficientETH();\\n        }\\n        if (lotteryState != State.Open) {\\n            revert Lottery__LotteryCalculating();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n        emit lotteryEnter(msg.sender);\\n    }\\n\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = lotteryState == State.Open;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n\\n        upkeepNeeded = (isOpen && timePassed && hasBalance && hasPlayers);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) public override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded) {\\n            revert Lottery__FailedUpkeep(\\n                uint256(lotteryState),\\n                s_players.length,\\n                address(this).balance\\n            );\\n        }\\n        lotteryState = State.Calculating;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            s_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit requestedLotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*_requestId*/,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        uint256 winnerIndex = _randomWords[0] % s_players.length;\\n        address payable realWinner = s_players[winnerIndex];\\n        s_recentWinner = realWinner;\\n        lotteryState = State.Open;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = realWinner.call{value: address(this).balance}(\\\"\\\");\\n        \\n        if (!success) {\\n            revert Lottery__FundsNotSent();\\n        }\\n        emit winnerPicked(realWinner);\\n\\n    }\\n    // getters\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getRecentWinner() public view returns (address){\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 playerIndex) public view returns (address){\\n        return s_players[playerIndex];\\n    }\\n\\n    function getLotteryState() public view returns (State) {\\n        return lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x1089a4bbdc936b3748bdaf12c6f6cd5f793a56a1334fbf050780c514e13a1e50\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200188438038062001884833981810160405281019062000038919062000293565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a0818152505060008060006101000a81548160ff021916908360018111156200009e576200009d6200032f565b5b02179055508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1681525050426001819055508061012081815250508360c081815250505050505050506200035e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015f8262000132565b9050919050565b620001718162000152565b81146200017d57600080fd5b50565b600081519050620001918162000166565b92915050565b6000819050919050565b620001ac8162000197565b8114620001b857600080fd5b50565b600081519050620001cc81620001a1565b92915050565b6000819050919050565b620001e781620001d2565b8114620001f357600080fd5b50565b6000815190506200020781620001dc565b92915050565b600067ffffffffffffffff82169050919050565b6200022c816200020d565b81146200023857600080fd5b50565b6000815190506200024c8162000221565b92915050565b600063ffffffff82169050919050565b6200026d8162000252565b81146200027957600080fd5b50565b6000815190506200028d8162000262565b92915050565b60008060008060008060c08789031215620002b357620002b26200012d565b5b6000620002c389828a0162000180565b9650506020620002d689828a01620001bb565b9550506040620002e989828a01620001f6565b9450506060620002fc89828a016200023b565b93505060806200030f89828a016200027c565b92505060a06200032289828a01620001bb565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114af620003d560003960006104d90152600081816106bc015261074e01526000610559015260006105360152600061051501526000818161034001528181610728015261077401526000818161036601526103ba01526114af6000f3fe6080604052600436106100dd5760003560e01c80636e04ff0d1161007f578063c1af578511610059578063c1af57851461029f578063c1c244e8146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80636e04ff0d1461020b5780637ea3e6c11461024957806391ad27b414610274576100dd565b8063473f1ddc116100bb578063473f1ddc1461015f57806353a2c19a1461018a5780635f1b0fd8146101b55780636b68c03c146101e0576100dd565b806309bc33a7146100e25780631fe543e31461010d5780634585e33b14610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c30565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610de4565b610364565b005b34801561014257600080fd5b5061015d60048036038101906101589190610e9b565b610424565b005b34801561016b57600080fd5b50610174610621565b6040516101819190610f29565b60405180910390f35b34801561019657600080fd5b5061019f61064a565b6040516101ac9190610c30565b60405180910390f35b3480156101c157600080fd5b506101ca610659565b6040516101d79190610c30565b60405180910390f35b3480156101ec57600080fd5b506101f5610666565b6040516102029190610fbb565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d919061108b565b61067c565b604051610240929190611177565b60405180910390f35b34801561025557600080fd5b5061025e610726565b60405161026b9190610c30565b60405180910390f35b34801561028057600080fd5b5061028961074a565b6040516102969190610c30565b60405180910390f35b6102a7610772565b005b3480156102b557600080fd5b506102be6108df565b6040516102cb9190610c30565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f691906111a7565b6108e9565b6040516103089190610f29565b60405180910390f35b34801561031d57600080fd5b50610326610931565b6040516103339190610c30565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040d9291906111d4565b60405180910390fd5b610420828261093e565b5050565b600061043e6040518060200160405280600081525061067c565b509050806104ab5760008054906101000a900460ff16600181111561046657610465610f44565b5b600280549050476040517f1d413ed40000000000000000000000000000000000000000000000000000000081526004016104a2939291906111fd565b60405180910390fd5b60016000806101000a81548160ff021916908360018111156104d0576104cf610f44565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b815260040161059a9594939291906112ac565b602060405180830381600087803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190611314565b9050807f8436886e362e85384c64d5af46721d434cb451102c48870819d9f8420f55317660405160405180910390a250505050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600263ffffffff16905090565b6000600361ffff16905090565b60008060009054906101000a900460ff16905090565b60006060600080600181111561069557610694610f44565b5b60008054906101000a900460ff1660018111156106b5576106b4610f44565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426106e99190611370565b119050600080600280549050119050600080471190508380156107095750825b80156107125750805b801561071b5750815b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107cc576040517f8c6a8c2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107e0576107df610f44565b5b60008054906101000a900460ff166001811115610800576107ff610f44565b5b14610837576040517fa2f05d8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f6ba87006f2c53f2d227d45b3400034f16dbf4f6842816c4880d30170f3a6a16060405160405180910390a2565b6000600154905090565b6000600282815481106108ff576108fe6113a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b60006002805490508260008151811061095a576109596113a4565b5b602002602001015161096c9190611402565b9050600060028281548110610984576109836113a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060006101000a81548160ff02191690836001811115610a1757610a16610f44565b5b0217905550600067ffffffffffffffff811115610a3757610a36610ca1565b5b604051908082528060200260200182016040528015610a655781602001602082028036833780820191505090505b5060029080519060200190610a7b929190610b70565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aa990611464565b60006040518083038185875af1925050503d8060008114610ae6576040519150601f19603f3d011682016040523d82523d6000602084013e610aeb565b606091505b5050905080610b26576040517f5a11844400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610be9579160200282015b82811115610be85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b90565b5b509050610bf69190610bfa565b5090565b5b80821115610c13576000816000905550600101610bfb565b5090565b6000819050919050565b610c2a81610c17565b82525050565b6000602082019050610c456000830184610c21565b92915050565b6000604051905090565b600080fd5b600080fd5b610c6881610c17565b8114610c7357600080fd5b50565b600081359050610c8581610c5f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cd982610c90565b810181811067ffffffffffffffff82111715610cf857610cf7610ca1565b5b80604052505050565b6000610d0b610c4b565b9050610d178282610cd0565b919050565b600067ffffffffffffffff821115610d3757610d36610ca1565b5b602082029050602081019050919050565b600080fd5b6000610d60610d5b84610d1c565b610d01565b90508083825260208201905060208402830185811115610d8357610d82610d48565b5b835b81811015610dac5780610d988882610c76565b845260208401935050602081019050610d85565b5050509392505050565b600082601f830112610dcb57610dca610c8b565b5b8135610ddb848260208601610d4d565b91505092915050565b60008060408385031215610dfb57610dfa610c55565b5b6000610e0985828601610c76565b925050602083013567ffffffffffffffff811115610e2a57610e29610c5a565b5b610e3685828601610db6565b9150509250929050565b600080fd5b60008083601f840112610e5b57610e5a610c8b565b5b8235905067ffffffffffffffff811115610e7857610e77610e40565b5b602083019150836001820283011115610e9457610e93610d48565b5b9250929050565b60008060208385031215610eb257610eb1610c55565b5b600083013567ffffffffffffffff811115610ed057610ecf610c5a565b5b610edc85828601610e45565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1382610ee8565b9050919050565b610f2381610f08565b82525050565b6000602082019050610f3e6000830184610f1a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f8457610f83610f44565b5b50565b6000819050610f9582610f73565b919050565b6000610fa582610f87565b9050919050565b610fb581610f9a565b82525050565b6000602082019050610fd06000830184610fac565b92915050565b600080fd5b600067ffffffffffffffff821115610ff657610ff5610ca1565b5b610fff82610c90565b9050602081019050919050565b82818337600083830152505050565b600061102e61102984610fdb565b610d01565b90508281526020810184848401111561104a57611049610fd6565b5b61105584828561100c565b509392505050565b600082601f83011261107257611071610c8b565b5b813561108284826020860161101b565b91505092915050565b6000602082840312156110a1576110a0610c55565b5b600082013567ffffffffffffffff8111156110bf576110be610c5a565b5b6110cb8482850161105d565b91505092915050565b60008115159050919050565b6110e9816110d4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561112957808201518184015260208101905061110e565b83811115611138576000848401525b50505050565b6000611149826110ef565b61115381856110fa565b935061116381856020860161110b565b61116c81610c90565b840191505092915050565b600060408201905061118c60008301856110e0565b818103602083015261119e818461113e565b90509392505050565b6000602082840312156111bd576111bc610c55565b5b60006111cb84828501610c76565b91505092915050565b60006040820190506111e96000830185610f1a565b6111f66020830184610f1a565b9392505050565b60006060820190506112126000830186610c21565b61121f6020830185610c21565b61122c6040830184610c21565b949350505050565b6000819050919050565b61124781611234565b82525050565b600067ffffffffffffffff82169050919050565b61126a8161124d565b82525050565b600061ffff82169050919050565b61128781611270565b82525050565b600063ffffffff82169050919050565b6112a68161128d565b82525050565b600060a0820190506112c1600083018861123e565b6112ce6020830187611261565b6112db604083018661127e565b6112e8606083018561129d565b6112f5608083018461129d565b9695505050505050565b60008151905061130e81610c5f565b92915050565b60006020828403121561132a57611329610c55565b5b6000611338848285016112ff565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137b82610c17565b915061138683610c17565b92508282101561139957611398611341565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140d82610c17565b915061141883610c17565b925082611428576114276113d3565b5b828206905092915050565b600081905092915050565b50565b600061144e600083611433565b91506114598261143e565b600082019050919050565b600061146f82611441565b915081905091905056fea26469706673582212204e62be34ae17ce3b5fda3dc48ae2678a6a793fd0d4169a804f5291610774f24264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80636e04ff0d1161007f578063c1af578511610059578063c1af57851461029f578063c1c244e8146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80636e04ff0d1461020b5780637ea3e6c11461024957806391ad27b414610274576100dd565b8063473f1ddc116100bb578063473f1ddc1461015f57806353a2c19a1461018a5780635f1b0fd8146101b55780636b68c03c146101e0576100dd565b806309bc33a7146100e25780631fe543e31461010d5780634585e33b14610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c30565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610de4565b610364565b005b34801561014257600080fd5b5061015d60048036038101906101589190610e9b565b610424565b005b34801561016b57600080fd5b50610174610621565b6040516101819190610f29565b60405180910390f35b34801561019657600080fd5b5061019f61064a565b6040516101ac9190610c30565b60405180910390f35b3480156101c157600080fd5b506101ca610659565b6040516101d79190610c30565b60405180910390f35b3480156101ec57600080fd5b506101f5610666565b6040516102029190610fbb565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d919061108b565b61067c565b604051610240929190611177565b60405180910390f35b34801561025557600080fd5b5061025e610726565b60405161026b9190610c30565b60405180910390f35b34801561028057600080fd5b5061028961074a565b6040516102969190610c30565b60405180910390f35b6102a7610772565b005b3480156102b557600080fd5b506102be6108df565b6040516102cb9190610c30565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f691906111a7565b6108e9565b6040516103089190610f29565b60405180910390f35b34801561031d57600080fd5b50610326610931565b6040516103339190610c30565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040d9291906111d4565b60405180910390fd5b610420828261093e565b5050565b600061043e6040518060200160405280600081525061067c565b509050806104ab5760008054906101000a900460ff16600181111561046657610465610f44565b5b600280549050476040517f1d413ed40000000000000000000000000000000000000000000000000000000081526004016104a2939291906111fd565b60405180910390fd5b60016000806101000a81548160ff021916908360018111156104d0576104cf610f44565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b815260040161059a9594939291906112ac565b602060405180830381600087803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190611314565b9050807f8436886e362e85384c64d5af46721d434cb451102c48870819d9f8420f55317660405160405180910390a250505050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600263ffffffff16905090565b6000600361ffff16905090565b60008060009054906101000a900460ff16905090565b60006060600080600181111561069557610694610f44565b5b60008054906101000a900460ff1660018111156106b5576106b4610f44565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426106e99190611370565b119050600080600280549050119050600080471190508380156107095750825b80156107125750805b801561071b5750815b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107cc576040517f8c6a8c2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107e0576107df610f44565b5b60008054906101000a900460ff166001811115610800576107ff610f44565b5b14610837576040517fa2f05d8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f6ba87006f2c53f2d227d45b3400034f16dbf4f6842816c4880d30170f3a6a16060405160405180910390a2565b6000600154905090565b6000600282815481106108ff576108fe6113a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b60006002805490508260008151811061095a576109596113a4565b5b602002602001015161096c9190611402565b9050600060028281548110610984576109836113a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060006101000a81548160ff02191690836001811115610a1757610a16610f44565b5b0217905550600067ffffffffffffffff811115610a3757610a36610ca1565b5b604051908082528060200260200182016040528015610a655781602001602082028036833780820191505090505b5060029080519060200190610a7b929190610b70565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aa990611464565b60006040518083038185875af1925050503d8060008114610ae6576040519150601f19603f3d011682016040523d82523d6000602084013e610aeb565b606091505b5050905080610b26576040517f5a11844400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610be9579160200282015b82811115610be85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b90565b5b509050610bf69190610bfa565b5090565b5b80821115610c13576000816000905550600101610bfb565b5090565b6000819050919050565b610c2a81610c17565b82525050565b6000602082019050610c456000830184610c21565b92915050565b6000604051905090565b600080fd5b600080fd5b610c6881610c17565b8114610c7357600080fd5b50565b600081359050610c8581610c5f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cd982610c90565b810181811067ffffffffffffffff82111715610cf857610cf7610ca1565b5b80604052505050565b6000610d0b610c4b565b9050610d178282610cd0565b919050565b600067ffffffffffffffff821115610d3757610d36610ca1565b5b602082029050602081019050919050565b600080fd5b6000610d60610d5b84610d1c565b610d01565b90508083825260208201905060208402830185811115610d8357610d82610d48565b5b835b81811015610dac5780610d988882610c76565b845260208401935050602081019050610d85565b5050509392505050565b600082601f830112610dcb57610dca610c8b565b5b8135610ddb848260208601610d4d565b91505092915050565b60008060408385031215610dfb57610dfa610c55565b5b6000610e0985828601610c76565b925050602083013567ffffffffffffffff811115610e2a57610e29610c5a565b5b610e3685828601610db6565b9150509250929050565b600080fd5b60008083601f840112610e5b57610e5a610c8b565b5b8235905067ffffffffffffffff811115610e7857610e77610e40565b5b602083019150836001820283011115610e9457610e93610d48565b5b9250929050565b60008060208385031215610eb257610eb1610c55565b5b600083013567ffffffffffffffff811115610ed057610ecf610c5a565b5b610edc85828601610e45565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1382610ee8565b9050919050565b610f2381610f08565b82525050565b6000602082019050610f3e6000830184610f1a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f8457610f83610f44565b5b50565b6000819050610f9582610f73565b919050565b6000610fa582610f87565b9050919050565b610fb581610f9a565b82525050565b6000602082019050610fd06000830184610fac565b92915050565b600080fd5b600067ffffffffffffffff821115610ff657610ff5610ca1565b5b610fff82610c90565b9050602081019050919050565b82818337600083830152505050565b600061102e61102984610fdb565b610d01565b90508281526020810184848401111561104a57611049610fd6565b5b61105584828561100c565b509392505050565b600082601f83011261107257611071610c8b565b5b813561108284826020860161101b565b91505092915050565b6000602082840312156110a1576110a0610c55565b5b600082013567ffffffffffffffff8111156110bf576110be610c5a565b5b6110cb8482850161105d565b91505092915050565b60008115159050919050565b6110e9816110d4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561112957808201518184015260208101905061110e565b83811115611138576000848401525b50505050565b6000611149826110ef565b61115381856110fa565b935061116381856020860161110b565b61116c81610c90565b840191505092915050565b600060408201905061118c60008301856110e0565b818103602083015261119e818461113e565b90509392505050565b6000602082840312156111bd576111bc610c55565b5b60006111cb84828501610c76565b91505092915050565b60006040820190506111e96000830185610f1a565b6111f66020830184610f1a565b9392505050565b60006060820190506112126000830186610c21565b61121f6020830185610c21565b61122c6040830184610c21565b949350505050565b6000819050919050565b61124781611234565b82525050565b600067ffffffffffffffff82169050919050565b61126a8161124d565b82525050565b600061ffff82169050919050565b61128781611270565b82525050565b600063ffffffff82169050919050565b6112a68161128d565b82525050565b600060a0820190506112c1600083018861123e565b6112ce6020830187611261565b6112db604083018661127e565b6112e8606083018561129d565b6112f5608083018461129d565b9695505050505050565b60008151905061130e81610c5f565b92915050565b60006020828403121561132a57611329610c55565b5b6000611338848285016112ff565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137b82610c17565b915061138683610c17565b92508282101561139957611398611341565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140d82610c17565b915061141883610c17565b925082611428576114276113d3565b5b828206905092915050565b600081905092915050565b50565b600061144e600083611433565b91506114598261143e565b600082019050919050565b600061146f82611441565b915081905091905056fea26469706673582212204e62be34ae17ce3b5fda3dc48ae2678a6a793fd0d4169a804f5291610774f24264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1210,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(State)1207"
      },
      {
        "astId": 1212,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1214,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1236,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(State)1207": {
        "encoding": "inplace",
        "label": "enum Lottery.State",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}